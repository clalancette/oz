#!/usr/bin/python

# Copyright (C) 2010,2011  Chris Lalancette <clalance@redhat.com>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation;
# version 2.1 of the License.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import getopt
import os
import logging
import time
import ConfigParser

import oz.TDL
import oz.GuestFactory

def usage():
    print "Usage: oz-install [OPTIONS] <tdl>"
    print " OPTIONS:"
    print "  -a <auto>\tUse the guest configuration tool from <auto> instead"
    print "\t\tof using the hard-coded one.  This is useful if you want to pass"
    print "\t\ta custom kickstart for installation"
    print "  -c <config>\tGet config from <config> (default is /etc/oz/oz.cfg)"
    print "  -d <level>\tTurn up logging level.  The levels are:"
    print "\t\t\t0 - errors only (this is the default)"
    print "\t\t\t1 - errors and warnings"
    print "\t\t\t2 - errors, warnings, and information"
    print "\t\t\t3 - all messages"
    print "\t\t\t4 - all messages, prepended with the level and classname"
    print "  -f\t\tForce download of installation media even if already cached"
    print "  -g\t\tGenerate the ICICLE after installation"
    print "  -h\t\tPrint this help message"
    print "  -p\t\tCleanup old guests with the same name before installation"
    print "  -t <timeout>\tUse a timeout of <timeout> for installation, rather than the default"
    print "  -u\t\tAfter installation, do the customization"
    print " Currently supported architectures are:"
    print "   i386, x86_64"
    print " Currently supported distros are:"
    oz.GuestFactory.distrolist()
    sys.exit(1)

try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'a:c:d:fghpt:u',
                                   ['auto', 'config', 'debug', 'force-download',
                                    'generate-icicle', 'help', 'cleanup',
                                    'timeout', 'customize'])
except getopt.GetoptError, err:
    print str(err)
    usage()

loglevel = logging.ERROR
logformat = "%(message)s"
force_download = False
config_file = "/etc/oz/oz.cfg"
generate_icicle = False
customize = False
cleanup = False
auto = None
timeout = None
for o, a in opts:
    if o in ("-a", "--auto"):
        auto = a
    elif o in ("-c", "--config"):
        config_file = a
    elif o in ("-d", "--debug"):
        try:
            d_int = int(a)
        except ValueError:
            usage()
        if d_int == 0:
            loglevel = logging.ERROR
        elif d_int == 1:
            loglevel = logging.WARNING
        elif d_int == 2:
            loglevel = logging.INFO
        elif d_int == 3:
            loglevel = logging.DEBUG
        elif d_int >= 4:
            loglevel = logging.DEBUG
            logformat = logging.BASIC_FORMAT
    elif o in ("-f", "--force-download"):
        force_download = True
    elif o in ("-g", "--generate-icicle"):
        generate_icicle = True
    elif o in ("-h", "--help"):
        usage()
    elif o in ("-p", "--cleanup"):
        cleanup = True
    elif o in ("-t", "--timeout"):
        timeout = int(a)
    elif o in ("-u", "--customize"):
        customize = True
    else:
        assert False, "unhandled option"

if os.geteuid() != 0:
    print "%s must be run as root" % (sys.argv[0])
    sys.exit(2)

if len(args) != 1:
    usage()

logging.basicConfig(level=loglevel, format=logformat)

tdl = oz.TDL.TDL(open(args[0], 'r').read())

config = ConfigParser.SafeConfigParser()
if os.access(config_file, os.F_OK):
    config.read(config_file)

try:
    guest = oz.GuestFactory.guest_factory(tdl, config, auto)
except oz.OzException.OzException as message:
    print ""
    print "   Error installing: " + str(message)
    print ""
    usage()

if cleanup:
    guest.cleanup_old_guest()
else:
    guest.check_for_guest_conflict()

libvirt_xml = guest.jeos(force_download)
if libvirt_xml is None:
    guest.generate_install_media(force_download)
    try:
        guest.generate_diskimage()
        libvirt_xml = guest.install(timeout)
    finally:
        guest.cleanup_install()

if customize and generate_icicle:
    print guest.customize_and_generate_icicle(libvirt_xml)
elif customize:
    guest.customize(libvirt_xml)
elif generate_icicle:
    print guest.generate_icicle(libvirt_xml)

filename = guest.name + time.strftime("%b_%d_%Y-%H:%M:%S")
open(filename, 'w').write(libvirt_xml)
print "Libvirt XML was written to " + filename
